title: Telefonspiel
enabled: false
count_score: no
difficulty: easy
ivr: true
--------
Programmiere dein eigenes Telefonspiel!

Wenn dein Spiel live geschaltet ist, kannst du es unter der folgenden Telefonnummer spielen:
<div style='margin-bottom: 15px;'><a href='tel:+493075438933' class='btn btn-success btn-lg'><i class='fa fa-phone'></i>&nbsp;&nbsp;030&#x2009;/&#x2009;754&#x2009;389&#x2009;33</a></div>

<hr />

<div style='margin-bottom: 15px;' id='ivr_div'></div>
<div id='ivr_div_list'></div>

<hr />

Für das Telefonspiel stehen dir folgende Methoden zur Verfügung:

{:.table.table-striped.table-sm.narrowwrap}
`say(s)`               | Text sprechen
`sleep(ms)`            | Pause für `ms` Millsekunden einfügen
`bg_play(url, offset, ducking)` | Musik von `url` im Hintergrund abspielen, optionale Parameter: `offset`: ab hier abspielen (in Millisekunden), `ducking`: wie sehr soll die Musik leiser werden, wenn gesprochen wird (0.0 bis 1.0)
`bg_stop()`            | Hintergrundmusik beenden
`dtmf(n)`              | Telefontasten einlesen (maximal `n` Zeichen), gibt einen String zurück
`set_title(n)`         | Spielnamen setzen (notwendig, wenn du ein Spiel veröffentlichen oder Sätze einsprechen möchtest)

Achtung: Um eine Methode aufzurufen, musst du `self.` davor schreiben, also z. B. `self.say('Hallo!')`.

--------
[verify]
false
--------
[template]
class Game(AnswerPhone):
    def run(self):
        self.set_title('Test')
        self.bg_play('https://youtu.be/dQsYLvGhO-k')
        self.sleep(4000)
        self.say("Hier kannst du dein eigenes Telefonspiel programmieren.")
        self.sleep(2000)
        self.say("""Du kannst dein Programm Texte sprechen lassen und
                 Eingaben von der Tastatur des Telefons einlesen.""")
        self.sleep(2000)
        self.say("Machen wir mal ein Beispiel. Drück bitte eine Taste.")
        taste = self.dtmf(1)
        self.say(f"Danke. Du hast die Taste {taste} gedrückt.")
        self.sleep(2000)
        self.say("Das Programm wird nun beendet.")
--------
[custom_main_pre]
import json
import subprocess
import sys
import os
import tempfile
import time

USER_EMAIL = "__USER_EMAIL__"

class AnswerPhone:
    def __init__(self, pipe):
        self.pipe = pipe
        self.title = None
        self._reset()
        self.bg_tag = None
        self.bg_offset = 0
        self.bg_ducking = 5.0
        self.ivr_mode = False
        self.t0 = None
        if len(sys.argv) > 1 and sys.argv[1] == '--ivr':
            self.ivr_mode = True

    def _reset(self):
        self.voice_queue = []

    def _api_call(self, data):
        proc = subprocess.Popen(['curl', '-s', '-X', 'POST', 'http://tts_helper:9292/', '--data-binary', '@-'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        proc.stdin.write(json.dumps(data).encode('utf-8'))
        proc.stdin.close()
        response = proc.stdout.read()
        response = json.loads(response)
        return response

    def _flush(self):
        t = time.time()
        if self.t0 == None:
            self.t0 = t
        t_offset = (t - self.t0) * 1000.0
        data = {'command': 'mix', 'voice_queue': []}
        if self.bg_tag != None:
            data['bg_tag'] = self.bg_tag
            data['bg_offset'] = self.bg_offset + t_offset
            data['bg_ducking'] = self.bg_ducking
        for path in self.voice_queue:
            data['voice_queue'].append(path)
        response = self._api_call(data)
        if self.ivr_mode:
            self.pipe.write(json.dumps({'path': response['path']}) + "\n")
        else:
            self.pipe.write(json.dumps({'path': response['path_hd']}) + "\n")
        self.pipe.flush()
        self._reset()

    def _dispatch(self, code):
        with open(f'/ivr/live/{code}', 'r') as f:
            data = json.loads(f.read())
            _global_dispatch(data['sha1'], data['email'])

    def set_title(self, title):
        self.title = title

    def bg_play(self, tag, offset = 0, ducking = 0.95):
        self.bg_tag = tag
        self.bg_offset = offset
        self.bg_ducking = ducking

    def bg_stop(self):
        self.bg_tag = None

    def say(self, text):
        response = self._api_call({'command': 'say', 's': text, 'title': self.title, 'email': USER_EMAIL})
        remaining = response['remaining']
        self.voice_queue.append(response['path_hd'])
        for sentence in remaining:
            response = self._api_call({'command': 'say', 's': sentence, 'already_split': True, 'title': self.title, 'email': USER_EMAIL})
            self.voice_queue.append(response['path_hd'])

    def play(self, url, offset = 0, length = 1000):
        response = self._api_call({'command': 'play', 'url': url, 'offset': offset, 'length': length})
        self.voice_queue.append(response['path_hd'])

    def sleep(self, ms):
        response = self._api_call({'command': 'sleep', 'ms': ms})
        self.voice_queue.append(response['path_hd'])

    def dtmf(self, max_digits):
        self.sleep(30000)
        self._flush()
        if self.ivr_mode:
            self.pipe.write(json.dumps({'get_dtmf': max_digits}) + "\n")
            self.pipe.flush()
            return sys.stdin.readline().strip()
        else:
            dtmf = input(f"Eingabe (max. {max_digits} Stellen): ")
            self.pipe.write(json.dumps({'command': 'reset_audio_queue'}) + "\n")
            self.pipe.flush()
            return dtmf

    def hangup(self):
        self.sleep(1000)
        self._flush()
        self.pipe.write(json.dumps({'command': 'hangup'}) + "\n")
        self.pipe.flush()
        if self.ivr_mode:
            while True:
                pass
            #sys.exit(0)
        else:
            while True:
                pass

def _global_dispatch(code, email):
    print("_global_dispatch:", code, file = sys.stderr)
    with tempfile.NamedTemporaryFile() as temp:
        with open(f'/ivr/header.py') as f:
            temp.write(f.read().replace('__USER_EMAIL__', email).encode('utf-8'))
        temp.write("\n".encode('utf-8'))
        with open(f'/code/{code}.py') as f:
            temp.write(f.read().encode('utf-8'))
        temp.write("\n".encode('utf-8'))
        temp.write("_stdout = sys.stdout\n".encode('utf-8'))
        temp.write("f = open('/dev/null', 'w')\nsys.stdout = f\n".encode('utf-8'))
        temp.write("game = Game(_stdout)\n".encode('utf-8'))
        temp.write("game.run()\n".encode('utf-8'))
        temp.write("game.hangup()\n".encode('utf-8'))
        temp.flush()
        os.execv('/usr/bin/python3', ['/usr/bin/python3', temp.name, '--ivr'])
